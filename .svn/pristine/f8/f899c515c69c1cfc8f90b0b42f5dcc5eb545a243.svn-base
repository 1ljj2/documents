package org.jit.sose.service.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.jit.sose.domain.entity.FileAudit;
import org.jit.sose.domain.entity.FileExampleProcess;
import org.jit.sose.domain.entity.FileInfo;
import org.jit.sose.domain.param.ForReviewToNextParam;
import org.jit.sose.domain.vo.ListAuditFileVo;
import org.jit.sose.domain.vo.PageInfoVo;
import org.jit.sose.mapper.FileAuditMapper;
import org.jit.sose.mapper.FileExampleProcessMapper;
import org.jit.sose.mapper.FileInfoMapper;
import org.jit.sose.mapper.ProcessStepsMapper;
import org.jit.sose.redis.RedisService;
import org.jit.sose.service.FileAuditService;
import org.jit.sose.util.EncryptionUtil;
import org.jit.sose.util.MD5Util;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Base64;
import java.util.List;

/**
 * @author wufang
 * @Date 2020-10-16 10:44:26
 */
@Service
public class FileAuditServiceImpl implements FileAuditService {

    @Autowired
    private FileAuditMapper fileAuditMapper;

    @Autowired
    private FileExampleProcessMapper fileExampleProcessMapper;

    @Autowired
    private ProcessStepsMapper processStepsMapper;

    @Autowired
    RedisService redisService;

    @Autowired
    FileInfoMapper fileInfoMapper;

    @Transactional
    @Override
    public void forReviewToNext(ForReviewToNextParam param) throws Exception {
        if ("C".equals(param.getAuditState())) {


            //通过
            //如果需要签章
            if (param.getIsSign()) {
                FileInfo fileInfo = new FileInfo();
                Integer userId = param.getFileUserId();//获取用户信息userId
                String aesKey = EncryptionUtil.rsaDecrypt(param.getAesKeyEncrypt(), (String) redisService.get(String.valueOf(userId)));//解密被非对称加密加密的对称加密秘钥
                String base64 = EncryptionUtil.aesDecrypt(param.getFileCodeStr(), aesKey);//文件base64编码解密
                fileInfo.setBase64(base64);
                fileInfo.setHashCode(MD5Util.getMD5(base64));//获取文件base64编码哈希值
                fileInfo.setUserId(userId);
                fileInfo.setType("C1");
                fileInfo.setFileCode(Base64.getDecoder().decode(fileInfo.getBase64().split(",")[1]));
                fileInfo.setPrefix("data:application/pdf;base64,");//前缀
                fileInfo.setFileName(param.getFileName());
                fileInfo.setSuffix("pdf");
//            System.out.println(fileInfo.getFileName());
                fileInfoMapper.insertSelective(fileInfo);
                FileAudit fileAudit = new FileAudit();
                fileAudit.setAuditOpinion(param.getOpinion());
                fileAudit.setId(param.getFileAuditId());
                fileAudit.setAuditState(param.getAuditState());
                fileAudit.setFileId(fileInfo.getId());
                //更新当前文档审核运转实例的数据
                fileAuditMapper.updateAuditById(param.getFileAuditId(), param.getAuditState(), param.getOpinion());
                if (param.getStepId() == null) {
                    FileExampleProcess fileExampleProcess = new FileExampleProcess();
                    fileExampleProcess.setId(param.getExampleId());
                    fileExampleProcess.setAuditState("C");
                    fileExampleProcessMapper.updateByPrimaryKeySelective(fileExampleProcess);
                } else {
                    //生成下一条记录
//            fileAuditMapper.addAuditRecord(param.getFileAuditId(),param.getExampleId(), param.getUserId(), param.getStepId(), "B");
                    FileAudit fileAudit1 = new FileAudit();
                    fileAudit1.setAuditState("B");
                    fileAudit1.setParId(param.getFileAuditId());
                    fileAudit1.setExampleId(param.getExampleId());
                    fileAudit1.setAuditUserId(param.getUserId());
                    fileAudit1.setStepId(param.getStepId());
                    fileAudit1.setFileId(fileInfo.getId());
                    fileAuditMapper.insertSelective(fileAudit1);
                }
            } else {
                //更新当前文档审核运转实例的数据
                fileAuditMapper.updateAuditById(param.getFileAuditId(), param.getAuditState(), param.getOpinion());
                if (param.getStepId() == null) {
                } else {
                    //生成下一条记录
                    fileAuditMapper.addAuditRecord(param.getFileAuditId(), param.getExampleId(), param.getUserId(), param.getStepId(), "B");
                }
            }


        } else if ("D".equals(param.getAuditState())) {
            //不通过-更新t_file_example_process中的审核状态
            FileExampleProcess example = new FileExampleProcess();
            example.setAuditState("D");
            fileExampleProcessMapper.updateByPrimaryKeySelective(example);
        }


    }

    @Override
    public PageInfoVo<ListAuditFileVo> listAuditFileMyRemind(Integer userId, Integer pageNum, Integer pageSize) {
        // 设置分页参数
        PageHelper.startPage(pageNum, pageSize);
        List<ListAuditFileVo> resultVo = fileAuditMapper.listAuditFileMyRemind(userId);
        PageInfo<ListAuditFileVo> pageInfo = new PageInfo<>(resultVo);
        return new PageInfoVo<>(pageInfo);
    }

    @Transactional
    @Override
    public void myFileForReview(Integer processId, Integer stepId, Integer userId, Integer fileId) {
        //t_file_example_process新增
        FileExampleProcess example = new FileExampleProcess();
        example.setFileId(fileId);
        example.setProcessId(processId);
        example.setAuditState("B");
        fileExampleProcessMapper.addExample(example);
        //获取新增返回的主键
        Integer exampleId = example.getId();
        //根据当前选择流程的第一个步骤标识，查询下一个步骤标识
        Integer auditStepId = processStepsMapper.selectNextStepIdById(stepId);
        //t_file_audit新增审核中的记录
        fileAuditMapper.addAuditRecord(0, exampleId, userId, auditStepId, "B");
    }

    @Override
    public int getProcessIdByFileId(Integer fileId) {

       return fileExampleProcessMapper.getProcessIdByFileId(fileId);
    }
}
