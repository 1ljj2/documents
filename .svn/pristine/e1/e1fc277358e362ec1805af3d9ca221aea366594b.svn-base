<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.jit.sose.mapper.UserRoleMapper" >
  <resultMap id="BaseResultMap" type="org.jit.sose.domain.entity.UserRole" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="state" property="state" jdbcType="CHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, role_id, state, create_date, update_date
  </sql>

  <select id="checkAuditArcPermission" resultType="java.lang.Integer" parameterType="java.lang.Integer">
    SELECT EXISTS
		(
	SELECT 1
	FROM
		`a_user_role` ur
		LEFT JOIN `a_role` r ON ( r.state != 'X' AND r.id = ur.role_id ) 
	WHERE
		ur.state != 'X' 
		AND r.role_key = 'ROLE_AUDIT_ARCHIVE' 
		AND ur.user_id = #{userId,jdbcType=INTEGER}
		)
  </select>
  
  <select id="checkAuditFilePermission" resultType="java.lang.Integer" parameterType="java.lang.Integer">
    SELECT EXISTS
		(
	SELECT 1
	FROM
		`a_user_role` ur
		LEFT JOIN `a_role` r ON ( r.state != 'X' AND r.id = ur.role_id ) 
	WHERE
		ur.state != 'X' 
		AND r.role_key = 'ROLE_AUDIT_FILE' 
		AND ur.user_id = #{userId,jdbcType=INTEGER}
		)
  </select>
  
  <select id="checkAuditNoticePermission" resultType="java.lang.Integer" parameterType="java.lang.Integer">
    SELECT EXISTS
		(
	SELECT 1
	FROM
		`a_user_role` ur
		LEFT JOIN `a_role` r ON ( r.state != 'X' AND r.id = ur.role_id ) 
	WHERE
		ur.state != 'X' 
		AND r.role_key = 'ROLE_AUDIT_NOTICE' 
		AND ur.user_id = #{userId,jdbcType=INTEGER}
		)
  </select>
  
  <select id="selectUserIdByRole" resultType="java.lang.Integer" parameterType="java.lang.Integer">
        SELECT
            user_id
        FROM
            `a_user_role` 
        WHERE
            state = 'A'
        AND role_id = #{roleId,jdbcType=INTEGER}
  </select>

  <!--注册时用户选择的基本角色-->
  <insert id="register" parameterType="org.jit.sose.domain.entity.UserRole" >
    insert into a_user_role
    <trim prefix="(" suffix=")" suffixOverrides="," >

      <if test="userId != null" >
        user_id,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>


<insert id="insertOrUpdateList" parameterType="java.util.Map">
        INSERT INTO a_user_role (user_id, role_id, state)
        VALUES
        <foreach collection="roleIdList" item="roleId" separator=",">
            (#{userId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER},'A')
        </foreach>
        ON DUPLICATE KEY UPDATE
        user_id = VALUES(user_id),
        role_id = VALUES(role_id),
        state = VALUES(state)
    </insert>

    <update id="deleteList" parameterType="java.util.Map">
        UPDATE a_user_role
        SET state = 'X'
        WHERE
        state = 'A'
        AND user_id = #{userId,jdbcType=INTEGER}
        AND role_id IN
        <foreach collection="roleIdList" item="roleId" open="(" close=")" separator=",">
            #{roleId,jdbcType=INTEGER}
        </foreach>
    </update>














  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from a_user_role
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from a_user_role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.jit.sose.domain.entity.UserRole" >
    insert into a_user_role (id, user_id, role_id, 
      state, create_date, update_date
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, 
      #{state,jdbcType=CHAR}, #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.jit.sose.domain.entity.UserRole" >
    insert into a_user_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="updateDate != null" >
        update_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        #{state,jdbcType=CHAR},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.jit.sose.domain.entity.UserRole" >
    update a_user_role
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=CHAR},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.jit.sose.domain.entity.UserRole" >
    update a_user_role
    set user_id = #{userId,jdbcType=INTEGER},
      role_id = #{roleId,jdbcType=INTEGER},
      state = #{state,jdbcType=CHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>