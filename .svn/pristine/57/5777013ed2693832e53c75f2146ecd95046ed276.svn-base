package org.jit.sose.controller.process;

import com.alibaba.fastjson.JSONObject;
import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;
import com.github.xiaoymin.knife4j.annotations.ApiSupport;
import com.github.xiaoymin.knife4j.annotations.DynamicParameter;
import com.github.xiaoymin.knife4j.annotations.DynamicParameters;
import io.swagger.annotations.*;
import org.jit.sose.domain.entity.SecurityUser;
import org.jit.sose.domain.param.AddEditProcessParam;
import org.jit.sose.domain.param.ListProcessParam;
import org.jit.sose.domain.vo.ListIdNameVo;
import org.jit.sose.domain.vo.ListProcessForReviewVo;
import org.jit.sose.domain.vo.ListProcessVo;
import org.jit.sose.domain.vo.PageInfoVo;
import org.jit.sose.service.ProcessService;
import org.jit.sose.service.UserService;
import org.jit.sose.util.ResponseUtil;
import org.jit.sose.util.StringUtil;
import org.jit.sose.web.response.CommonRespT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import springfox.documentation.annotations.ApiIgnore;

import java.util.List;

/**
 * @author wufang
 * @Date 2020-07-01 22:31:27
 */
@ApiResponses({@ApiResponse(code = 200, message = "Request Success"),
        @ApiResponse(code = 401, message = "Authentication Failure"),
        @ApiResponse(code = 402, message = "Login Information Invalid"),
        @ApiResponse(code = 403, message = "No Permission"), @ApiResponse(code = 500, message = "Request fail")})
@Api(tags = "流程接口")
@ApiSupport(author = "wufang")
@RestController
@RequestMapping("/process/process")
public class ProcessController {

    @Autowired
    private ProcessService processService;

    @Autowired
    private UserService userService;

//    @Autowired
//    private EditedFileService editedFileService;

    @ApiOperation(value = "根据【流程名称、所属分类、分页参数】筛选流程列表对象")
    @PostMapping("/listForReviewByCondition")
    @Transactional
    public PageInfoVo<ListProcessForReviewVo> listForReviewByCondition(@ApiIgnore @AuthenticationPrincipal SecurityUser securityUser, @RequestBody ListProcessParam param) {
        //获取用户的角色标识集合---用于控制流程对应角色的显示，默认role关联id为1（admin）的用户可以看见所有
        List<Integer> roleIdList = userService.getRoleIdList(securityUser);
        param.setRoleIdList(roleIdList);
        System.out.println("Controller:" + param);
        return processService.listForReviewByCondition(param);
    }

    @ApiOperation(value = "根据processName模糊查询流程名称、标识")
    @ApiOperationSupport(order = 10)
    @PostMapping("/listProcessByName")
    public CommonRespT<List<ListIdNameVo>> listProcessByName(@RequestBody JSONObject json) {
        String processName = StringUtil.isEmpty(json.getString("processName")) ? null : json.getString("processName");
        List<ListIdNameVo> voList = processService.listProcessByName(processName);
        return ResponseUtil.successT(voList);
    }
//
//    @ApiOperation(value = "(根据processId)查询所有的流程信息及其子步骤idList")
//    @ApiOperationSupport(order = 9)
//    @PostMapping("/selectProcessAndStepIdList")
//    public CommonRespT<List<ProcessAndStepIdVo>> selectProcessAndStepIdList(@RequestBody Integer id) {
//        List<ProcessAndStepIdVo> voList = processService.selectProcessAndStepIdList(id);
//        return ResponseUtil.successT(voList);
//    }
//
//    @ApiOperation(value = "根据【流程名称、分页参数、用户】筛选流程列表对象")
//    @ApiOperationSupport(order = 8)
//    @PostMapping("/listProcessByNameUser")
//    public PageInfoVo<ListSimProcessVo> listProcessByNameUser(@ApiIgnore @AuthenticationPrincipal SecurityUser securityUser, @RequestBody JSONObject json) {
//        //获取用户的角色信息
//        Set<String> roleKeys = userService.getRoles(securityUser);
//        List<String> roleKeyList = new ArrayList<>(roleKeys);
//        ListSimProcessParam param = new ListSimProcessParam();
//        //搜索参数
//        param.setRoleKeyList(roleKeyList);
//        String processName = json.getString("processName");
//        param.setProcessName(StringUtil.isEmpty(processName) ? null : processName);
//        //分页参数
//        param.setPageNum(json.getIntValue("pageNum"));
//        param.setPageSize(json.getIntValue("pageSize"));
//        return processService.listProcessByNameUser(param);
//    }

    @ApiOperation(value = "编辑流程及其流程步骤")
    @ApiOperationSupport(order = 7)
    @PostMapping("/editProcess")
    public void editProcess(@RequestBody AddEditProcessParam param) {
        System.out.println(param);
        processService.editProcess(param);
    }

    @ApiOperation(value = "新增流程项")
    @ApiOperationSupport(order = 6)
    @PostMapping("/addProcess")
    public void addProcess(@RequestBody AddEditProcessParam param) {
        processService.addProcess(param);
    }

    @ApiOperationSupport(order = 5)
    @ApiOperation(value = "批量删除流程")
    @ApiImplicitParam(name = "idList", value = "流程标识集合", required = true, paramType = "body", allowMultiple = true, dataType = "Integer")
    @PostMapping("/removeProcessSelect")
    public void removeProcessSelect(@RequestBody List<Integer> idList) {
        processService.removeProcessSelect(idList);
    }

    @ApiOperation(value = "批量禁用流程项")
    @ApiOperationSupport(order = 4)
    @ApiImplicitParam(name = "idList", value = "流程标识集合", required = true, paramType = "body", allowMultiple = true, dataType = "Integer")
    @PostMapping("/disableProcessSelect")
    public void disableProcessSelect(@RequestBody List<Integer> idList) {
        processService.disableProcessSelect(idList);
    }

    @ApiOperation(value = "删除单个流程", notes = "根据一个流程项标识，删除该流程项")
    @ApiImplicitParam(name = "id", value = "流程项标识", required = true, dataTypeClass = Integer.class, example = "1")
    @ApiOperationSupport(order = 3)
    @PostMapping("/removeProcess")
    public void removeProcess(@RequestBody Integer id) {
        processService.removeProcess(id);
    }

    @ApiOperation(value = "单个更改流程项启用禁用状态", notes = "根据一个流程项标识，禁用该流程项")
    @ApiOperationSupport(order = 2, params = @DynamicParameters(properties = {
            @DynamicParameter(name = "id", value = "流程项标识", required = true, dataTypeClass = Integer.class),
            @DynamicParameter(name = "enable", value = "是否启用", dataTypeClass = String.class)}))
    @PostMapping("/changeEnableProcess")
    public void changeEnableProcess(@RequestBody JSONObject json) {
        Integer id = json.getInteger("id");
        String enable = json.getString("enable");
        processService.changeEnableProcess(id, enable);
    }

    @ApiOperation(value = "根据【流程名称、所属分类、服务角色、分页参数】筛选流程列表对象")
    @ApiOperationSupport(order = 1)
    @PostMapping("/listByCondition")
    @Transactional
    public PageInfoVo<ListProcessVo> listByCondition(@ApiIgnore @AuthenticationPrincipal SecurityUser securityUser, @RequestBody ListProcessParam param) {
        //获取用户的角色标识集合---用于控制流程对应角色的显示，默认role关联id为1（admin）的用户可以看见所有
        List<Integer> roleIdList = userService.getRoleIdList(securityUser);
        param.setRoleIdList(roleIdList);
        System.out.println("Controller:" + param);
        return processService.listByCondition(param);
    }
//
//    @ApiOperation(value = "根据userStepId查询所需审批的文件的url")
//    @PostMapping("/getPdfUrl")
//    public CommonRespT<String> getPdfUrl(@RequestBody Integer userStepId) {
////        System.out.println(userStepId);
//        String pdfUrl = editedFileService.getUrlByUserStepId(userStepId);
//        return ResponseUtil.successT(pdfUrl);
//    }

}
