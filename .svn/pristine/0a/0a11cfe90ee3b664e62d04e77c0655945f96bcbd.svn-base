package org.jit.sose.controller.archive;

import com.github.xiaoymin.knife4j.annotations.ApiSupport;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.jit.sose.domain.entity.SecurityUser;
import org.jit.sose.domain.param.ArchiveTemInfoParam;
import org.jit.sose.domain.param.ListArchiveTemParam;
import org.jit.sose.domain.vo.ListArchiveTemVo;
import org.jit.sose.domain.vo.PageInfoVo;
import org.jit.sose.service.ArchiveTemplateService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import springfox.documentation.annotations.ApiIgnore;

/**
 * @author wufang
 * @Date 2020-07-01 22:31:27
 */
@ApiResponses({@ApiResponse(code = 200, message = "Request Success"),
        @ApiResponse(code = 401, message = "Authentication Failure"),
        @ApiResponse(code = 402, message = "Login Information Invalid"),
        @ApiResponse(code = 403, message = "No Permission"), @ApiResponse(code = 500, message = "Request fail")})
@Api(tags = "档案模板接口")
@ApiSupport(author = "wufang")
@RestController
@RequestMapping("/archive/archiveTem")
public class ArchiveTemplateController {

    @Autowired
    private ArchiveTemplateService archiveTemplateService;

    @ApiOperation(value = "新增档案模板信息")
    @PostMapping("/addArchiveTem")
    public void addArchiveTem(@RequestBody ArchiveTemInfoParam param) {
//        System.out.println(param+"+++++++++++++++++++++++++");
        archiveTemplateService.addArchiveTem(param);
    }

    @ApiOperation(value = "编辑档案模板信息")
    @PostMapping("/editArchiveTem")
    public void editArchiveTem(@RequestBody ArchiveTemInfoParam param) {
        archiveTemplateService.editArchiveTem(param);
    }

    @ApiOperation(value = "根据【档案模板名称、学期、分类、分页参数】筛选档案模板列表对象")
    @PostMapping("/listArchiveTemByCondition")
    public PageInfoVo<ListArchiveTemVo> listArchiveTemByCondition(@RequestBody ListArchiveTemParam param,
                                                                  @ApiIgnore @AuthenticationPrincipal SecurityUser securityUser) {
        param.setUserId(securityUser.getId());
        return archiveTemplateService.listArchiveTemByCondition(param);
    }



}
