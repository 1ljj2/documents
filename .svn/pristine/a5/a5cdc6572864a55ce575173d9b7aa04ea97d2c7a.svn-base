<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.jit.sose.mapper.FileInfoMapper">
    <resultMap id="BaseResultMap" type="org.jit.sose.domain.entity.FileInfo">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="class_id" property="classId" jdbcType="INTEGER"/>
        <result column="parent_id" property="parentId" jdbcType="INTEGER"/>
        <result column="number" property="number" jdbcType="VARCHAR"/>
        <result column="file_name" property="fileName" jdbcType="VARCHAR"/>
        <result column="suffix" property="suffix" jdbcType="VARCHAR"/>
        <result column="prefix" property="prefix" jdbcType="VARCHAR"/>
        <result column="access_url" property="accessUrl" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="role_id" property="roleId" jdbcType="INTEGER"/>
        <result column="hash_code" property="hashCode" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="VARCHAR"/>
        <result column="is_enable" property="isEnable" jdbcType="BIT"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
        <result column="state" property="state" jdbcType="CHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="state_time" property="stateTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="org.jit.sose.domain.entity.FileInfo" extends="BaseResultMap">
        <result column="file_code" property="fileCode" jdbcType="LONGVARBINARY"/>
    </resultMap>

    <resultMap id="ResultMapWithRoleLsit" type="org.jit.sose.domain.entity.FileInfo" extends="BaseResultMap">
        <result column="file_code" property="fileCode" jdbcType="LONGVARBINARY"/>
        <collection property="roleIdList" column="id" javaType="ArrayList" ofType="java.lang.Integer"
                    select="getRoleIdList"/>
    </resultMap>

    <sql id="Base_Column_List">
    id, class_id, parent_id, number, file_name, access_url, user_id, hash_code, type,
    is_enable, remark, state, create_time, state_time
  </sql>
    <sql id="Blob_Column_List">
    file_code
  </sql>

    <select id="listMatchFile" resultType="org.jit.sose.domain.vo.ListMatchFileTemVo"
            parameterType="java.util.Map">
        SELECT
            fi.id AS fileId,
            fi.file_name AS fileName,
            fi.number AS number
        FROM
            `a_file_info` fi
        LEFT JOIN t_file_course_con fcc ON (
            fcc.state = 'A'
            AND fcc.file_info_id = fi.id
        )
        LEFT JOIN t_file_term_con ftc ON (
            ftc.state = 'A'
            AND ftc.file_id = fi.id
        )
        WHERE
            fi.state = 'A'
        AND fi.type = 'A'
        AND fcc.course_id = #{courseId,jdbcType=INTEGER}
        AND ftc.term_id = #{termId,jdbcType=INTEGER}
    </select>


    <update id="editFileInfo" parameterType="org.jit.sose.domain.param.FileInfoParam">
        update a_file_info
        <set>
            <if test="fileName != null">
                file_name = #{fileName,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="listFileTemByCondition" resultType="org.jit.sose.domain.vo.ListFileTemVo"
            parameterType="org.jit.sose.domain.param.ListFileTemParam">
        SELECT
        fi.id AS fileId,
        fi.file_name AS fileName,
        fi.number,
        fi.remark,
        fi.state_time AS stateTimeString,
        ftc.term_id AS termId,
        yt.term_name AS termName,
        fcc.category_id AS categoryId,
        c. NAME AS categoryName,
        fc.course_id AS courseId,
        ci.course_name AS courseName
        FROM
        `a_file_info` fi
        LEFT JOIN t_file_term_con ftc ON (
        ftc.state = 'A'
        AND ftc.file_id = fi.id
        )
        LEFT JOIN t_year_term yt ON (
        yt.state = 'A'
        AND yt.id = ftc.term_id
        )
        LEFT JOIN t_file_category_con fcc ON (
        fcc.state = 'A'
        AND fcc.file_id = fi.id
        )
        LEFT JOIN a_category c ON (
        c.state = 'A'
        AND c.id = fcc.category_id
        )
        LEFT JOIN t_file_course_con fc ON (
        fc.state = 'A'
        AND fc.file_info_id = fi.id
        )
        LEFT JOIN t_course_info ci ON (
        ci.state = 'A'
        AND fc.course_id = ci.id
        )
        WHERE
        fi.state = 'A'
        AND fi.type = 'A'
        <if test="termId != null">
            AND ftc.term_id = #{termId,jdbcType=INTEGER}
        </if>
        <if test="categoryId != null">
            AND fcc.category_id = #{categoryId,jdbcType=INTEGER}
        </if>
        <if test="fileTemName != null">
            AND fi.file_name LIKE CONCAT('%', #{fileTemName,jdbcType=VARCHAR}, '%')
        </if>
        ORDER BY
        fi.state_time DESC
    </select>

    <!--根据【流程文档名称、学期、分类、创建者、分页参数】筛选我审核的文档列表对象-->
    <select id="listMyAuditFile" resultType="org.jit.sose.domain.vo.listMyAuditFileVo"
            parameterType="org.jit.sose.domain.param.listMyAuditFileParam">
        SELECT DISTINCT
        fi.id AS fileId,
        fi.file_name AS fileName,
        fi.number,
        fi.remark,
        fi.state_time AS stateTimeString,
        ftc.term_id AS termId,
        yt.term_name AS termName,
        fcc.category_id AS categoryId,
        c.NAME AS categoryName,
        fc.course_id AS courseId,
        ci.course_name AS courseName,
        fep.audit_state AS auditState,
        a_user.user_name AS userName
        FROM
        `a_file_info` fi
        LEFT JOIN t_file_term_con ftc ON ( ftc.state = 'A' AND ftc.file_id = fi.id )
        LEFT JOIN t_year_term yt ON ( yt.state = 'A' AND yt.id = ftc.term_id )
        LEFT JOIN t_file_category_con fcc ON ( fcc.state = 'A' AND fcc.file_id = fi.id )
        LEFT JOIN a_category c ON ( c.state = 'A' AND c.id = fcc.category_id )
        LEFT JOIN t_file_course_con fc ON ( fc.state = 'A' AND fc.file_info_id = fi.id )
        LEFT JOIN t_course_info ci ON ( ci.state = 'A' AND fc.course_id = ci.id )
        LEFT JOIN t_file_example_process fep ON ( fep.state != 'X' AND fep.file_id = fi.id )
        LEFT JOIN t_file_audit fa ON ( fa.state != 'X' AND fa.example_id = fep.id )
        LEFT JOIN a_user ON ( a_user.state = 'A' AND a_user.id = fi.user_id )
        WHERE
        fi.state = 'A'
        AND fi.type = 'C1'
        AND fa.audit_user_id = #{userId,jdbcType=INTEGER}
        <if test="createrId != null and createrId != ''">
            AND fi.user_id = #{createrId,jdbcType=INTEGER}
        </if>
        <if test="termId != null and termId != ''">
            AND ftc.term_id = #{termId,jdbcType=INTEGER}
        </if>
        <if test="categoryId != null and categoryId != ''">
            AND fcc.category_id = #{categoryId,jdbcType=INTEGER}
        </if>
        <if test="courseId != null and courseId != ''">
            AND fc.course_id = #{courseId,jdbcType=INTEGER}
        </if>
        <if test="fileName != null and fileName != ''">
            AND fi.file_name LIKE CONCAT('%', #{fileName,jdbcType=VARCHAR}, '%')
        </if>
        ORDER BY
        fi.state_time DESC
    </select>


    <!--根据【名称、学期、分类、分页参数】筛选我的文档-->
    <select id="listMyFile" resultType="org.jit.sose.domain.vo.ListMyFileVo"
            parameterType="org.jit.sose.domain.param.ListMyFileParam">
        SELECT
        fi.id AS fileId,
        fi.file_name AS fileName,
        fi.number,
        fi.remark,
        fi.state_time AS stateTimeString,
        ftc.term_id AS termId,
        yt.term_name AS termName,
        fcc.category_id AS categoryId,
        c. NAME AS categoryName,
        fc.course_id AS courseId,
        ci.course_name AS courseName,
        tfep.audit_state AS auditState
        FROM
        `a_file_info` fi
        LEFT JOIN t_file_term_con ftc ON (
        ftc.state = 'A'
        AND ftc.file_id = fi.id
        )
        LEFT JOIN t_year_term yt ON (
        yt.state = 'A'
        AND yt.id = ftc.term_id
        )
        LEFT JOIN t_file_category_con fcc ON (
        fcc.state = 'A'
        AND fcc.file_id = fi.id
        )
        LEFT JOIN a_category c ON (
        c.state = 'A'
        AND c.id = fcc.category_id
        )
        LEFT JOIN t_file_course_con fc ON (
        fc.state = 'A'
        AND fc.file_info_id = fi.id
        )
        LEFT JOIN t_course_info ci ON (
        ci.state = 'A'
        AND fc.course_id = ci.id
        )
        LEFT JOIN t_file_example_process tfep ON tfep.file_id = fi.id
        WHERE
        fi.state != 'X'
        AND fi.type = 'C1'
        <if test="termId != null and termId !=''">
            AND ftc.term_id = #{termId,jdbcType=INTEGER}
        </if>
        <if test="categoryId != null and categoryId !=''">
            AND fcc.category_id = #{categoryId,jdbcType=INTEGER}
        </if>
        <if test="fileName != null and fileName !=''">
            AND fi.file_name LIKE CONCAT('%', #{fileName,jdbcType=VARCHAR}, '%')
        </if>
        <if test="auditState != null and auditState !=''">
            AND tfep.audit_state = #{auditState,jdbcType=VARCHAR}
        </if>
        ORDER BY
        fi.state_time DESC
    </select>

    <!--根据【流程模板名称、学期、分类、课程、分页参数】筛选文档监管列表对象【个人文件，类型为C】-->
    <select id="listChargingFileByCondition" resultType="org.jit.sose.domain.vo.ListChargingFileVo"
            parameterType="org.jit.sose.domain.param.ListChargingFileParam">
        SELECT
        fi.id AS fileId,
        fi.file_name AS fileName,
        fi.number,
        fi.remark,
        fi.is_enable AS isEnable,
        fi.state_time AS stateTimeString,
        ftc.term_id AS termId,
        yt.term_name AS termName,
        fcc.category_id AS categoryId,
        c.NAME AS categoryName,
        fc.course_id AS courseId,
        ci.course_name AS courseName,
        fi.user_id AS userId,
        a_user.user_name AS userName
        FROM
        `a_file_info` fi
        LEFT JOIN t_file_term_con ftc ON ( ftc.state = 'A' AND ftc.file_id = fi.id )
        LEFT JOIN t_year_term yt ON ( yt.state = 'A' AND yt.id = ftc.term_id )
        LEFT JOIN t_file_category_con fcc ON ( fcc.state = 'A' AND fcc.file_id = fi.id )
        LEFT JOIN a_category c ON ( c.state = 'A' AND c.id = fcc.category_id )
        LEFT JOIN t_file_course_con fc ON ( fc.state = 'A' AND fc.file_info_id = fi.id )
        LEFT JOIN t_course_info ci ON ( ci.state = 'A' AND fc.course_id = ci.id )
        LEFT JOIN a_user ON fi.user_id = a_user.id
        WHERE
        fi.state != 'X'
        AND fi.type = 'C1'
        <if test="termId != null and termId !=''">
            AND ftc.term_id = #{termId,jdbcType=INTEGER}
        </if>
        <if test="categoryId != null and categoryId !=''">
            AND fcc.category_id = #{categoryId,jdbcType=INTEGER}
        </if>
        <if test="fileTemName != null and fileTemName !=''">
            AND fi.file_name LIKE CONCAT('%', #{fileTemName,jdbcType=VARCHAR}, '%')
        </if>
        <if test="state != null and state !=''">
            AND fi.state = #{state,jdbcType=VARCHAR}
        </if>
        <if test="userId != null and userId != ''">
            AND a_user.userId = #{userId,jdbcType=INTEGER}
        </if>
        OR
        fi.state != 'X'
        AND fi.type = 'C2'
        <if test="termId != null and termId !=''">
            AND ftc.term_id = #{termId,jdbcType=INTEGER}
        </if>
        <if test="categoryId != null and categoryId !=''">
            AND fcc.category_id = #{categoryId,jdbcType=INTEGER}
        </if>
        <if test="fileTemName != null and fileTemName !=''">
            AND fi.file_name LIKE CONCAT('%', #{fileTemName,jdbcType=VARCHAR}, '%')
        </if>
        <if test="state != null and state !=''">
            AND fi.state = #{state,jdbcType=VARCHAR}
        </if>
        <if test="userId != null and userId != ''">
            AND a_user.userId = #{userId,jdbcType=INTEGER}
        </if>
        ORDER BY
        fi.state_time DESC
    </select>


    <!--插入公章/签名-->
    <insert id="insertSignature" parameterType="org.jit.sose.domain.entity.FileInfo" useGeneratedKeys="true"
            keyProperty="id" keyColumn="id">
        insert into a_file_info
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="classId != null">
                class_id,
            </if>
            <if test="parentId != null">
                parent_id,
            </if>
            <if test="number != null">
                number,
            </if>
            <if test="fileName != null">
                file_name,
            </if>
            <if test="suffix != null">
                suffix,
            </if>
            <if test="prefix != null">
                prefix,
            </if>
            <if test="accessUrl != null">
                access_url,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="hashCode != null">
                hash_code,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="isEnable != null">
                is_enable,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="stateTime != null">
                state_time,
            </if>
            <if test="fileCode != null">
                file_code,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="classId != null">
                #{classId,jdbcType=INTEGER},
            </if>
            <if test="parentId != null">
                #{parentId,jdbcType=INTEGER},
            </if>
            <if test="number != null">
                #{number,jdbcType=VARCHAR},
            </if>
            <if test="fileName != null">
                #{fileName,jdbcType=VARCHAR},
            </if>
            <if test="suffix != null">
                #{suffix,jdbcType=VARCHAR},
            </if>
            <if test="prefix != null">
                #{prefix,jdbcType=VARCHAR},
            </if>
            <if test="accessUrl != null">
                #{accessUrl,jdbcType=VARCHAR},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="hashCode != null">
                #{hashCode,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=CHAR},
            </if>
            <if test="isEnable != null">
                #{isEnable,jdbcType=BIT},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="state != null">
                #{state,jdbcType=CHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="stateTime != null">
                #{stateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="fileCode != null">
                #{fileCode,jdbcType=LONGVARBINARY},
            </if>
        </trim>
    </insert>


    <insert id="insertSelective" parameterType="org.jit.sose.domain.entity.FileInfo" useGeneratedKeys="true"
            keyProperty="id" keyColumn="id">
        insert into a_file_info
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="classId != null">
                class_id,
            </if>
            <if test="parentId != null">
                parent_id,
            </if>
            <if test="number != null">
                number,
            </if>
            <if test="fileName != null">
                file_name,
            </if>
            <if test="suffix != null">
                suffix,
            </if>
            <if test="prefix != null">
                prefix,
            </if>
            <if test="accessUrl != null">
                access_url,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="hashCode != null">
                hash_code,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="isEnable != null">
                is_enable,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="stateTime != null">
                state_time,
            </if>
            <if test="fileCode != null">
                file_code,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="classId != null">
                #{classId,jdbcType=INTEGER},
            </if>
            <if test="parentId != null">
                #{parentId,jdbcType=INTEGER},
            </if>
            <if test="number != null">
                #{number,jdbcType=VARCHAR},
            </if>
            <if test="fileName != null">
                #{fileName,jdbcType=VARCHAR},
            </if>
            <if test="suffix != null">
                #{suffix,jdbcType=VARCHAR},
            </if>
            <if test="prefix != null">
                #{prefix,jdbcType=VARCHAR},
            </if>
            <if test="accessUrl != null">
                #{accessUrl,jdbcType=VARCHAR},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="hashCode != null">
                #{hashCode,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=CHAR},
            </if>
            <if test="isEnable != null">
                #{isEnable,jdbcType=BIT},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="state != null">
                #{state,jdbcType=CHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="stateTime != null">
                #{stateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="fileCode != null">
                #{fileCode,jdbcType=LONGVARBINARY},
            </if>
        </trim>
    </insert>


    <!--签名信息过滤查询-->
    <select id="selectSignatureList" resultMap="ResultMapWithRoleLsit">
        SELECT DISTINCT
        afi.id AS id,
        afi.file_name AS file_name,
        afi.user_id AS user_id,
        afi.remark AS remark
        FROM
        a_file_info afi
        LEFT JOIN t_file_role_con tfrc ON afi.id = tfrc.file_id
        WHERE
        afi.user_id =#{userId,jdbcType=INTEGER}
        AND afi.state!='X'
        AND afi.type = 'E'
        <if test="fileName != null and fileName !=''">
            AND LOCATE(#{fileName,jdbcType=VARCHAR},afi.file_name)
        </if>
        OR tfrc.role_id IN (SELECT a_user_role.role_id FROM a_user_role WHERE
        a_user_role.user_id=#{userId,jdbcType=INTEGER})
        AND afi.state!='X'
        AND afi.type = 'E'
        <if test="roleIdList !=null">
            AND tfrc.role_id IN
            <foreach collection="roleIdList" index="index" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </select>

    <!--根据id查询文件信息【文件编码获取】-->
    <select id="getFileCodeById" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        id, file_name, user_id, type, remark, create_time, state_time,prefix,suffix
        ,
        <include refid="Blob_Column_List"/>
        from a_file_info
        where id = #{id,jdbcType=INTEGER}
    </select>

    <select id="getRoleIdList" resultType="java.lang.Integer" parameterType="java.lang.Integer">
        select
        role_id
        from t_file_role_con
        where file_id = #{id,jdbcType=INTEGER}
    </select>

    <!--文件逻辑删除-->
    <update id="updateStateToX" parameterType="java.lang.Integer">
    update a_file_info
    set
      state = 'X'
    where id = #{id,jdbcType=INTEGER}
  </update>

    <!--文件逻辑删除-->
    <update id="updateSelectedStateToX" parameterType="java.lang.Integer">
        update a_file_info
        set
        state = 'X'
        WHERE
        id IN
        <foreach collection="list" item="id" index="index"
                 separator="," open="(" close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
    </update>

    <!--查询数据库中是否有相同的文件记录-->
    <select id="fileVerification" resultType="java.lang.Integer" parameterType="java.lang.String">
        SELECT
            COUNT(*)
        FROM
            a_file_info afi
        WHERE
            afi.hash_code = #{hashCode,jdbcType=VARCHAR}
    </select>

    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from a_file_info
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from a_file_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="org.jit.sose.domain.entity.FileInfo">
    insert into a_file_info (id, class_id, parent_id, 
      number, file_name, access_url, 
      user_id, hash_code, type, 
      is_enable, remark, state, create_time, 
      state_time, file_code)
    values (#{id,jdbcType=INTEGER}, #{classId,jdbcType=INTEGER}, #{parentId,jdbcType=INTEGER}, 
      #{number,jdbcType=VARCHAR}, #{fileName,jdbcType=VARCHAR}, #{accessUrl,jdbcType=VARCHAR}, 
      #{userId,jdbcType=INTEGER}, #{hashCode,jdbcType=VARCHAR}, #{type,jdbcType=CHAR}, 
      #{isEnable,jdbcType=BIT}, #{remark,jdbcType=VARCHAR}, #{state,jdbcType=CHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{stateTime,jdbcType=TIMESTAMP}, #{fileCode,jdbcType=LONGVARBINARY})
  </insert>

    <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.jit.sose.domain.entity.FileInfo">
    update a_file_info
    set class_id = #{classId,jdbcType=INTEGER},
      parent_id = #{parentId,jdbcType=INTEGER},
      number = #{number,jdbcType=VARCHAR},
      file_name = #{fileName,jdbcType=VARCHAR},
      access_url = #{accessUrl,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      hash_code = #{hashCode,jdbcType=VARCHAR},
      type = #{type,jdbcType=CHAR},
      is_enable = #{isEnable,jdbcType=BIT},
      remark = #{remark,jdbcType=VARCHAR},
      state = #{state,jdbcType=CHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      state_time = #{stateTime,jdbcType=TIMESTAMP},
      file_code = #{fileCode,jdbcType=LONGVARBINARY}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <update id="updateByPrimaryKey" parameterType="org.jit.sose.domain.entity.FileInfo">
    update a_file_info
    set class_id = #{classId,jdbcType=INTEGER},
      parent_id = #{parentId,jdbcType=INTEGER},
      number = #{number,jdbcType=VARCHAR},
      file_name = #{fileName,jdbcType=VARCHAR},
      access_url = #{accessUrl,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      hash_code = #{hashCode,jdbcType=VARCHAR},
      type = #{type,jdbcType=CHAR},
      is_enable = #{isEnable,jdbcType=BIT},
      remark = #{remark,jdbcType=VARCHAR},
      state = #{state,jdbcType=CHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      state_time = #{stateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>