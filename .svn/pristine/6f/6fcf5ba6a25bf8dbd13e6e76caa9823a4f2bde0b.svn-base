package org.jit.sose.controller.file;

import com.github.xiaoymin.knife4j.annotations.ApiSupport;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.jit.sose.domain.entity.FileInfo;
import org.jit.sose.domain.entity.SecurityUser;
import org.jit.sose.domain.param.FileInfoParam;
import org.jit.sose.domain.param.ListChargingFileParam;
import org.jit.sose.domain.param.ListFileTemParam;
import org.jit.sose.domain.vo.ListChargingFileVo;
import org.jit.sose.domain.vo.ListFileTemVo;
import org.jit.sose.domain.vo.PageInfoVo;
import org.jit.sose.redis.RedisService;
import org.jit.sose.service.FileCategoryConService;
import org.jit.sose.service.FileInfoService;
import org.jit.sose.util.EncryptionUtil;
import org.jit.sose.util.FileUtil;
import org.jit.sose.util.MD5Util;
import org.jit.sose.util.ResponseUtil;
import org.jit.sose.web.response.CommonRespT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import springfox.documentation.annotations.ApiIgnore;

import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

/**
 * @author LJH
 * @Date 2020年10月3日10点59分
 */
@Api(tags = "文件接口")
@ApiSupport(author = "LJH")
@RestController
@RequestMapping("/file/file")
public class FileController {

    @Autowired
    private FileUtil fileUtil;

    @Autowired
    RedisService redisService;

    @Autowired
    FileInfoService fileInfoService;

    @Autowired
    FileCategoryConService fileCategoryConService;

    @ApiOperation(value = "编辑文件信息")
    @PostMapping("/editFileInfo")
    public void editFileInfo(@RequestBody FileInfoParam param) {
        fileInfoService.editFileInfo(param);
    }

    @ApiOperation(value = "根据【流程模板名称、学期、分类、分页参数】筛选文档模板列表对象")
    @PostMapping("/listFileTemByCondition")
    public PageInfoVo<ListFileTemVo> listFileTemByCondition(@RequestBody ListFileTemParam param) {
        return fileInfoService.listFileTemByCondition(param);
    }

    @ApiOperation(value = "根据【流程模板名称、学期、分类、课程、分页参数】筛选文档监管列表对象")
    @PostMapping("/listChargingFileByCondition")
    public PageInfoVo<ListChargingFileVo> listChargingFileByCondition(@RequestBody ListChargingFileParam param) {
        return fileInfoService.listChargingFileByCondition(param);
    }

    @ApiOperation(value = "设置文件可用")
    @PostMapping("/enableFile")
    public CommonRespT<?> enableFile(@RequestBody Integer id) {
        FileInfo fileInfo = new FileInfo();
        fileInfo.setId(id);
        fileInfo.setIsEnable(true);
        if (fileInfoService.updateById(fileInfo)) {
            return ResponseUtil.successT("success");
        } else {
            return ResponseUtil.successT("fail");
        }
    }

    @ApiOperation(value = "设置文件禁用")
    @PostMapping("/disableFile")
    public CommonRespT<?> disableFile(@RequestBody Integer id) {
        FileInfo fileInfo = new FileInfo();
        fileInfo.setId(id);
        fileInfo.setIsEnable(false);
        if (fileInfoService.updateById(fileInfo)) {
            return ResponseUtil.successT("success");
        } else {
            return ResponseUtil.successT("fail");
        }
    }

    @ApiOperation(value = "上传文件")
    @PostMapping("/uploadFile")
    public CommonRespT<?> uploadFile(@RequestBody FileInfo fileInfo, @ApiIgnore @AuthenticationPrincipal SecurityUser securityUser) throws Exception {
        Integer userId = securityUser.getId();//获取用户信息userId
        String aesKey = EncryptionUtil.rsaDecrypt(fileInfo.getAesKeyEncrypt(), (String) redisService.get(String.valueOf(userId)));//解密被非对称加密加密的对称加密秘钥
        String base64 = EncryptionUtil.aesDecrypt(fileInfo.getFileCodeStr(), aesKey);//文件base64编码解密
        fileInfo.setBase64(base64);
        fileInfo.setHashCode(MD5Util.getMD5(base64));//获取文件base64编码哈希值
        fileInfo.setUserId(userId);
        int flag = 0;
        if (fileInfo.getParameters().get(0).equals("E")) {//"E"上传的是签名文件
            fileInfo.setType("E");
            flag = fileInfoService.insertSignature(fileInfo);
            if (flag > 0) {
                return ResponseUtil.successT("success");
            } else {
                return ResponseUtil.successT("fail");
            }
        } else if (fileInfo.getParameters().get(0).equals("F")) {//"E"上传的是验真文件
            flag = fileInfoService.fileVerification(fileInfo.getHashCode());//用于记录数据库中相同文件的数量
            Map result = new HashMap();
            result.put("fileName", fileInfo.getFileName());
            if (flag > 0) {
                result.put("result", "success");
                return ResponseUtil.successT(result);
            } else {
                result.put("result", "fail");
                return ResponseUtil.successT(result);
            }
        } else if (fileInfo.getParameters().get(0).equals("A")) {//"A"上传的是文件模板
            fileInfo.setType("A");
            flag = fileInfoService.insertFileTem(fileInfo);
            if (flag > 0) {
                return ResponseUtil.successT("success");
            } else {
                return ResponseUtil.successT("fail");
            }
        }


        return ResponseUtil.successT("success");

    }

    /**
     * 获取文件base64编码
     * @param f
     * @param securityUser
     * @return
     * @throws Exception
     */
    @ApiOperation(value = "获取文件编码【下载文件】")
    @PostMapping(value = "/getFileCodeById")
    public FileInfo getFileCodeById(@RequestBody FileInfo f, @ApiIgnore @AuthenticationPrincipal SecurityUser securityUser) throws Exception {
        FileInfo fileInfo = fileInfoService.getFileCodeById(f.getId());

        String aesKey = EncryptionUtil.rsaDecrypt(f.getAesKeyEncrypt(), (String) redisService.get(String.valueOf(securityUser.getId())));//解密被非对称加密加密的对称加密秘钥
        String fileBase64Encrypt = EncryptionUtil.encryptAes(fileInfo.getPrefix()+ Base64.getEncoder().encodeToString(fileInfo.getFileCode()), aesKey);//对文件base64编码进行ase对称加密
        fileInfo.setBase64(fileBase64Encrypt);
        fileInfo.setFileCode(null);
        return fileInfo;
    }

    /**
     * 文件逻辑删除
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "逻辑删除文件")
    @PostMapping(value = "/delete")
    public int delete(@RequestBody Integer id) {
        return fileInfoService.updateStateToX(id);
    }


//    /**
//     * 下载文件(获取文件base64编码
//     *
//     * @param json
//     * @param securityUser
//     * @return
//     * @throws Exception
//     */
//    @PostMapping("/downloadFile")
//    public CommonResp downloadFile(@RequestBody JSONObject json, @ApiIgnore @AuthenticationPrincipal SecurityUser securityUser) throws Exception {
//        System.out.println("json" + json);
//        FileInfo fileInfo = new FileInfo();//返回的文件对象
//        String downloadFile = json.getString("downloadFile"); // 文件地址
////        System.out.println("downloadFile"+downloadFile);
////        System.out.println();
//        if (downloadFile==null) {
//            String fileUrl = json.getString("fileUrl"); // 文件地址
//            String aesKey = json.getString("aesKey");//对称加密秘钥
//            String fileName = json.getString("fileName");//文件名称
//            String aesKey2 = EncryptionUtil.rsaDecrypt(aesKey, (String) redisService.get(String.valueOf(securityUser.getId())));//解密被非对称加密加密的对称加密秘钥
//            String fileBase64;
//            if (fileUrl.endsWith(".doc")) {//判断文件是否需要抓换文件格式
//                String pdfFileUrl = fileUtil.wordToPDF(fileUrl);//获取转换文件格式为pdf之后的文件地址
//                fileBase64 = fileUtil.encodeBase64File(pdfFileUrl);//获取文件base64编码
//            } else {
//                fileBase64 = fileUtil.encodeBase64File(fileUrl);//获取文件base64编码
//            }
//            String fileBase64Encrypt = EncryptionUtil.encryptAes(fileBase64, aesKey2);//对文件base64编码进行ase对称加密
//            fileInfo.setFileBase64Encrypt(fileBase64Encrypt);//设置返回对象中的对称加密后的文件编码
//            fileInfo.setFileName(fileName);//设置返回对象中的文件名称
//            return new CommonResp(200, "success", fileInfo);
//        } else {
//            String fileUrl = json.getString("fileUrl"); // 文件地址
//            String aesKey = json.getString("aesKey");//对称加密秘钥
//            String fileName = json.getString("fileName");//文件名称
//            String aesKey2 = EncryptionUtil.rsaDecrypt(aesKey, (String) redisService.get(String.valueOf(securityUser.getId())));//解密被非对称加密加密的对称加密秘钥
//            String fileBase64;
//            fileBase64 = fileUtil.encodeBase64File(fileUrl);//获取文件base64编码
//            String fileBase64Encrypt = EncryptionUtil.encryptAes(fileBase64, aesKey2);//对文件base64编码进行ase对称加密
//            fileInfo.setFileBase64Encrypt(fileBase64Encrypt);//设置返回对象中的对称加密后的文件编码
//            fileInfo.setFileName(fileName);//设置返回对象中的文件名称
//            return new CommonResp(200, "success", fileInfo);
//        }
//
//
//    }
}
