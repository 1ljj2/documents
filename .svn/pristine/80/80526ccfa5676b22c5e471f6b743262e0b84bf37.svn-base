var vCategory = new Vue({
    el: '#category',
    data: function () {
        return {
            firstPath: '/config/category',// 请求一级路径  ————————》/config/eecstate
            nowData: [], loading: true, selection: [],
            column: [
                {title: '分类名称', key: 'name'},
                {title: '类型', key: 'type'},
                {title: '备注', key: 'remark'},
            ],// 域表表头
            totalNum: 0, pageNum: 1, pageSize: 10,  // 分页参数
            loadingMsg: '',// 加载提示
            notice: '',// 提醒对象
            category: {
                id: '', name: '', type: '', remark: '', state: ''
            },// 实体类
            allType:[
                {type: 'A',name: '文档'},
                {type:'B', name:'档案'},
                {type:'C',name :'公告'},
                {type:'D',name :'流程'},
                {type:'E',name :'消息'}
            ],
            allTypeForEdit:[
                {type: 'A',name: '文档'},
                {type:'B', name:'档案'},
                {type:'C',name :'公告'},
                {type:'D',name :'流程'},
                {type:'E',name :'消息'}
            ],
            sCategory: {
                type: ''
            },// 搜索信息
            eCategory: {
                type: ''
            },// 编辑信息
            course:{},

            addEecstateModal: false,// 新增域表信息模态框
            editEecstateModal: false,// 编辑域表信息模态框
            removeEecstateModal: false,// 删除域表信息模态框
            removeEecstateSelectModal: false,// 批量删除域表信息模态框
        }
    },
    components: {
        'layout-header': httpVueLoader(PROJECT_NAME + '/templates/layout/layout-header.vue'),
        'layout-sider': httpVueLoader(PROJECT_NAME + '/templates/layout/layout-sider.vue'),
        'layout-footer': httpVueLoader(PROJECT_NAME + '/templates/layout/layout-footer.vue')
    },
    beforeCreate: function () {
        CheckPermissions();
    },
    mounted() {
        this.initPage();
        this.filter();
        console.log('===========');
    },
    methods: {
        /**
         * 页面初始化加载项 表格表头
         */
        initPage() {
            // this.column.push(HeadTooltip('remark', '备注'));
            // 添加自定义slot-scope
            this.column.push(HeadActionSlot(true));
            this.column.push(HeadIndex(true))
            // 添加多选
            this.column.unshift(HeadSelection(true));

            console.log("column数据：", this.column);
        },


        /**
         * 表格过滤查询
         */
        filter() {
            console.log('当前页：' + this.pageNum);
            console.log('页面大小：' + this.pageSize);
            //console.log('表名：' + this.sEecstate.tableName);
            // console.log('列名：' + this.sEecstate.colmName);
            let data = {
                pageNum: this.pageNum,
                pageSize: this.pageSize,
                type: this.sCategory.type
            };
            console.log(data)
            let url = this.firstPath+'/queryAllCategory';    //-------》改
            CallAjaxPost(url, data, this.filterSuc);
            // 显示加载
            this.loading = true;
        },

        /**
         * 表格过滤查询回调函数
         *
         * @param data
         *            请求返回参数
         */
        filterSuc(data) {
            console.log(data);
            // 取消显示加载
            this.loading = false;
            this.nowData = data.obj.list;
            for(let one of this.nowData){
                if(one.type==='A')
                    one.type='文档'
                else if(one.type==='B')
                    one.type='档案'
                else if(one.type==='C')
                    one.type='公告'
                else if(one.type==='D')
                    one.type='流程'
                else
                    one.type='消息'
            };
            this.totalNum = data.obj.total;
            // 再次设置当前页码,若查询记录为空，设为第一页
            this.pageNum = data.obj.pageNum === 0 ? 1 : data.obj.pageNum;

            /* console.log('返回的表名：' + data.obj.list[0].tableName); */
        },

        /**
         * 清除搜索条件
         */
        clearSEecstate() {
            this.sCategory.type='';
            this.filter();
        },

        /**
         * 改变页码
         *
         * @param pageNum
         *            改变后的页码
         */
        onPageChange(pageNum) {
            this.pageNum = pageNum;
            this.filter();
        },
        /**
         * 切换每页条数
         *
         * @param pageSize
         *            换后的每页条数
         */
        onPageSizeChange(pageSize) {
            this.pageSize = pageSize;
            this.filter();
        },

        /**
         * 检查域表信息数据格式
         *
         * @return {boolean} 若数据格式错误,返回true
         */
        checkEecstate() {
            if (CheckEmpty(this.category.name, '请输入分类') ||
                CheckLength(this.category.name, '20', '添加的分类不能超过20个字符') ||
                CheckEmpty(this.category.type, '请选择类型') ||
                //CheckEmpty(this.category.remark, '请输入备注') ||
                CheckLength(this.category.remark, '50', '备注不能超过50个字符')
            // CheckEmpty(this.course.state, '请输入状态') ||
            // CheckLength(this.course.state, '2', '状态不能超过2个字符')
            // checkEmpty(this.eecstate.colmName, '请输入列名称') ||
            // checkLength(this.eecstate.colmName, '20', '列名称不能超过20个字符') ||
            // checkEmpty(this.eecstate.code, '请输入编码') ||
            // checkLength(this.eecstate.code, '20', '编码不能超过20个字符') ||
            // checkEmpty(this.eecstate.codeName, '请输入编码名称') ||
            // checkLength(this.eecstate.codeName, '50', '编码名不能超过50个字符') ||
            // checkEmpty(this.eecstate.seq, '请输入序号') ||
            // checkLength(this.eecstate.seq, '2', '序号不能超过2个字符')
            ){
                return true;
            }
        },

        /**
         * 新增域表信息
         */
        addEecstate() {
            // 检查数据格式
            if (this.checkEecstate()) {
                return;
            }
            // 发送请求
            let data = {
                name:this.category.name,
                type:this.category.type,
                remark:this.category.remark,
            };
            console.log("---------------===============--------------");
            console.log(data);
            let url = this.firstPath+'/insertOneCategory';
            CallAjaxPost(url, data, this.addEecstateSuc);
            // 打开加载提示
            this.loadingMsg = MessageLoading();
        },

        /**
         * 新增域表信息回调函数
         *
         * @param data
         *            请求返回参数
         */
        addEecstateSuc(data) {
            // 关闭加载提示
            CloseMessageLoading(this.loadingMsg);
            console.log("返回数据：", data);
            if (data.obj === "exist") {
                MessageWarning('已存在相同记录');
                return;
            }
            MessageSuccess("新增信息成功");
            this.clearEecstate();
            this.filter();
            this.addEecstateModal = false;
        },
        /**
         * 取消新增域表
         */
        cancelAddEecstate() {
            // 关闭模态框
            this.addEecstateModal = false;
            // 清除域表信息
            this.clearEecstate();
        },

        /**
         * 打开编辑域表信息模态框
         *
         * @param index
         *            当前数据索引
         */
        openEditEecstateModal(index) {
            this.category.id=this.nowData[index].id;
            this.category.name=this.nowData[index].name;
            // if(this.nowData[index].type==='文档') this.nowData[index].type='A';
            // else if(this.nowData[index].type==='档案') this.nowData[index].type='B';
            // else if (this.nowData[index].type==='公告') this.nowData[index].type='C';
            // else if(this.nowData[index].type==='流程') this.nowData[index].type='D';
            // else this.nowData[index].type='D';
            this.category.type = this.nowData[index].type;                            //----------》修改
            //this.course.courseName = this.nowData[index].courseName;
            this.category.remark = this.nowData[index].remark;
            //this.course.state = this.nowData[index].state;
            // this.eecstate.colmName = this.nowData[index].colmName;
            // this.eecstate.code = this.nowData[index].code;
            // this.eecstate.codeName = this.nowData[index].codeName;
            // this.eecstate.seq = this.nowData[index].seq;
            // this.eecstate.remark = this.nowData[index].remark;
            // 打开模态框
            this.editEecstateModal = true;
        },
        /**
         * 修改域表信息
         */
        editEecstate() {
            // 检查数据格式
            if (this.checkEecstate()) {
                return;
            };
            if(this.category.type==='文档') this.category.type='A';
            if(this.category.type==='档案') this.category.type='B';
            if (this.category.type==='公告') this.category.type='C';
            if(this.category.type==='流程') this.category.type='D';
            if(this.category.type==='消息') this.category.type='E';
            /* debugger */
            let data = {
                id:this.category.id,
                name:this.category.name,
                //////////////////////////////////////////////////////////////
                type:this.category.type,
                remark:this.category.remark,
                // state:this.course.state,
                // id: this.course.id
                // table: this.eecstate.table,
                // tableName: this.eecstate.tableName,
                // colm: this.eecstate.colm,
                // colmName: this.eecstate.colmName,
                // code: this.eecstate.code,
                // codeName: this.eecstate.codeName,
                // seq: this.eecstate.seq,
                // remark: this.eecstate.remark
            };
            let url =this.firstPath+'/updateOneCategory';
            CallAjaxPost(url, data, this.editEecstateSuc);
            // 打开加载提示
            this.loadingMsg = MessageLoading();
        },
        editEecstateSuc(data) {
            // 关闭加载提示
            CloseMessageLoading(this.loadingMsg);

            // 关闭模态框
            this.editEecstateModal = false;
            MessageSuccess("课程信息修改成功");
            // 重新查询数据
            this.filter();
            // 清除域表信息
            this.clearEecstate();
        },
        /**
         * 取消修改域表信息
         */
        cancelEditEecstate() {
            // 关闭模态框
            this.editEecstateModal = false;
            // 清除域表信息
            this.clearEecstate();
        },
        /**
         * 清除域表信息
         */
        clearEecstate() {
            this.category.name= '';
            this.category.type= '';
            this.category.remark = '';
            // this.eecstate.colm = '';
            // this.eecstate.colmName = '';
            // this.eecstate.code = '';
            // this.eecstate.codeName = '';
            // this.eecstate.seq = '';
            // this.eecstate.remark = '';
        },

        /**
         * 在多选模式下有效，只要选中项发生变化时就会触发
         *
         * @param selection
         *            已选项数据
         */
        onSelectionChange(selection) {
            this.selection = selection;
            console.log(this.selection);
        },

        /**
         * 打开删除数据模态框
         */
        openRemoveEecstateSelectModal() {
            // 判断当前多选是否勾选
            if (this.selection.length === 0) {
                MessageWarning('请先勾选数据，再批量删除');
                return;
            }
            // 打开模态框
            this.removeEecstateSelectModal = true;
        },

        /**
         * 批量删除数据
         */
        removeEecstateSelect() {
            // 关闭模态框
            this.removeEecstateModal = false;
            var idList = [];
            for (let i = 0; i < this.selection.length; i++) {
                idList[i] = this.selection[i].id;
            }
            console.log(idList);
            let data = idList;
            let url = this.firstPath + '/deleteSelectedCategory';
            CallAjaxPost(url, data, this.removeEecstateSelectSuc);
            // 打开加载提示
            this.loadingMsg = MessageLoading();
        },

        /**
         * 批量删除数据成功回调函数
         */
        removeEecstateSelectSuc(data) {
            console.log(data)
            // 关闭加载提示
            CloseMessageLoading(this.loadingMsg);
            MessageSuccess('成功删除记录！');//' + data.length + '
            // 清除多选列表
            this.selection = [];
            // 加载表格数据
            this.filter();
        },

        /**
         * 打开删除数据模态框
         *
         * @param index
         *            当前数据索引
         */
        openRemoveEecstate(index) {
            this.category.id = this.nowData[index].id;
            this.removeEecstateModal = true;
        },

        /**
         * 删除域表信息
         *
         * @param index
         */
        removeEecstate() {                        //////------>gai
            this.removeEecstateModal = false;
            let data = this.category.id;
            let url = this.firstPath + '/deleteOneCategory';
            CallAjaxPost(url, data, this.removeEecstateSuc);

            // 打开加载提示
            this.loadingMsg = MessageLoading();
        },

        removeEecstateSuc(data) {
            // 关闭加载提示
            CloseMessageLoading(this.loadingMsg);
            MessageSuccess('该条信息删除成功！');
            // 重新查询数据
            this.filter();
        },


    }
});
