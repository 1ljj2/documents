<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.jit.sose.mapper.MessReadUserMapper" >
  <resultMap id="BaseResultMap" type="org.jit.sose.domain.entity.MessReadUser" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="mess_id" property="messId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="is_read" property="isRead" jdbcType="CHAR" />
    <result column="state" property="state" jdbcType="CHAR" />
    <result column="state_time" property="stateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="UserMessMap" type="org.jit.sose.domain.vo.ListReadUserByMess" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="mess_id" property="messId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="is_read" property="isRead" jdbcType="CHAR" />
    <result column="state" property="state" jdbcType="CHAR" />
    <result column="state_time" property="stateTime" jdbcType="TIMESTAMP" />
    <result column="user_name" property="userId" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, mess_id, user_id, is_read, state, state_time
  </sql>
  
  <update id="setXByUserId" parameterType="org.jit.sose.domain.entity.MessReadUser">
        UPDATE t_mess_read_user
        SET state = 'X'
        WHERE
            user_id = #{userId,jdbcType=INTEGER}
        AND
            mess_id = #{messId,jdbcType=INTEGER}
            
    </update>
  
  <insert id="addConList" parameterType="java.util.Map">
        insert into t_mess_read_user
        (mess_id, user_id)
        values
        <foreach collection="readUserIdList" item="userId" index="index" separator=",">
            (#{messId,jdbcType=INTEGER},#{userId,jdbcType=INTEGER})
        </foreach>
    </insert>
  
  <update id="setXByMessId" parameterType="java.lang.Integer">
        UPDATE t_mess_read_user
        SET state = 'X'
        WHERE
            mess_id = #{messId,jdbcType=INTEGER}
    </update>
  
  <select id="listReadUserIdByMessId" resultType="java.lang.Integer" parameterType="java.lang.Integer">
        SELECT
            mru.user_id
        FROM
            `t_mess_read_user` mru
        WHERE
            mru.state = 'A'
        AND mru.mess_id = #{messId,jdbcType=INTEGER}
  </select>
  
  <select id="listReadUserByMessId" resultType="org.jit.sose.domain.vo.ListReadUserByMess" parameterType="java.lang.Integer">
        SELECT
            mru.user_id,u.user_name,mru.mess_id,mru.id
        FROM
            `t_mess_read_user` mru
        LEFT JOIN `a_user` u ON (
        u.state = 'A'
        AND mru.user_id = u.id
        )
        WHERE
            mru.state = 'A'
        AND mru.mess_id = #{messId,jdbcType=INTEGER}
  </select>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_mess_read_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_mess_read_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.jit.sose.domain.entity.MessReadUser" >
    insert into t_mess_read_user (id, mess_id, user_id, 
      is_read, state, state_time
      )
    values (#{id,jdbcType=INTEGER}, #{messId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{isRead,jdbcType=CHAR}, #{state,jdbcType=CHAR}, #{stateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.jit.sose.domain.entity.MessReadUser" >
    insert into t_mess_read_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="messId != null" >
        mess_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="isRead != null" >
        is_read,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="stateTime != null" >
        state_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="messId != null" >
        #{messId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="isRead != null" >
        #{isRead,jdbcType=CHAR},
      </if>
      <if test="state != null" >
        #{state,jdbcType=CHAR},
      </if>
      <if test="stateTime != null" >
        #{stateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.jit.sose.domain.entity.MessReadUser" >
    update t_mess_read_user
    <set >
      <if test="messId != null" >
        mess_id = #{messId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="isRead != null" >
        is_read = #{isRead,jdbcType=CHAR},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=CHAR},
      </if>
      <if test="stateTime != null" >
        state_time = #{stateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.jit.sose.domain.entity.MessReadUser" >
    update t_mess_read_user
    set mess_id = #{messId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      is_read = #{isRead,jdbcType=CHAR},
      state = #{state,jdbcType=CHAR},
      state_time = #{stateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>