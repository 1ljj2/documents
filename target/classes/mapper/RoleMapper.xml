<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.jit.sose.mapper.RoleMapper">
	<resultMap id="BaseResultMap"
		type="org.jit.sose.domain.entity.Role">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="role_key" property="roleKey" jdbcType="VARCHAR" />
		<result column="role_name" property="roleName"
			jdbcType="VARCHAR" />
		<result column="description" property="description"
			jdbcType="VARCHAR" />
		<result column="is_enable" property="enable" jdbcType="BIT" />
		<result column="create_date" property="createDate"
			jdbcType="TIMESTAMP" />
		<result column="update_date" property="updateDate"
			jdbcType="TIMESTAMP" />
		<result column="state" property="state" jdbcType="CHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		id, role_key, role_name, description, is_enable, create_date, update_date
	</sql>

	<select id="translateNameToId" resultType="java.lang.Integer" parameterType="java.lang.String">
		SELECT
		id
		FROM
		`a_role`
		WHERE
		state = 'A'
		<if test="roleName != null"> 
		AND role_name IN
		<foreach collection="list" item="roleName" index="index"
				 separator="," open="(" close=")">
			#{roleName,jdbcType=VARCHAR}
		</foreach>
		</if>
	</select>

	<select id="translateKeyToId" resultType="java.lang.Integer"
			parameterType="java.lang.String">
		SELECT
		id
		FROM
		`a_role`
		WHERE
		state = 'A'
		AND role_key IN
		<foreach collection="collection" item="roleKey" index="index"
				 separator="," open="(" close=")">
			#{roleKey,jdbcType=VARCHAR}
		</foreach>
	</select>

	<select id="showRoleSelected" resultType="java.lang.String"
		parameterType="java.lang.Integer">
		SELECT
		role_name
		FROM
		`a_role`
		WHERE
		state = 'A'
		AND id IN
		<foreach collection="list" item="id" index="index"
			separator="," open="(" close=")">
			#{id,jdbcType=INTEGER}
		</foreach>
	</select>

	<select id="listRoleByName"
		resultType="org.jit.sose.domain.vo.ListRoleVo"
		parameterType="java.lang.String">
		SELECT
		id,
		role_name AS roleName,
		description
		FROM
		`a_role`
		WHERE
		state = 'A'
		<if test="roleName != null">
			AND role_name like CONCAT('%',#{roleName,jdbcType=VARCHAR},'%')
		</if>
	</select>
	
	<select id="listRoleNameById"
		resultType="org.jit.sose.domain.vo.ListRoleVo"
		parameterType="java.lang.String">
		SELECT
		role_name AS roleName,
		description
		FROM
		`a_role`
		WHERE
		state = 'A'
		AND id IN
		<foreach collection="list" item="id" index="index"
			separator="," open="(" close=")">
			#{id,jdbcType=INTEGER}
		</foreach>
	</select>
	<select id="listRoleKeyByUserId" resultType="java.lang.String"
		parameterType="java.lang.Integer">
		SELECT
		r.role_key
		FROM
		a_role r
		INNER JOIN a_user_role ur ON ur.role_id = r.id
		AND ur.user_id = #{userId,jdbcType=INTEGER}
		WHERE
		r.is_enable = 1
		AND r.state = 'A'
		AND ur.state = 'A'
	</select>
	
	<select id="listRoleKeyNameByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    SELECT
        r.id,
        r.role_key,
        r.role_name
    FROM
        a_role r
    INNER JOIN a_user_role ur ON ur.role_id = r.id
    AND ur.user_id = #{userId,jdbcType=INTEGER}
    WHERE
        r.is_enable = 1
    AND r.state = 'A'
    AND ur.state = 'A'
  </select>

	<select id="listRoleKeyWithId" resultMap="BaseResultMap">
		SELECT
		id,
		role_key
		FROM
		`a_role`
		WHERE
		is_enable = 1
		AND state = 'A'
	</select>


	<select id="listRoleByKeyName"
		parameterType="org.jit.sose.domain.entity.Role"
		resultMap="BaseResultMap">
		SELECT
		r.id,
		r.role_key,
		r.role_name,
		r.description,
		r.is_enable
		FROM
		a_role r
		WHERE
		r.state = 'A'
		<if test="roleKey != null">
			AND r.role_key LIKE CONCAT('%', #{roleKey,jdbcType=VARCHAR}, '%')
		</if>
		<if test="roleName != null">
			AND r.role_name LIKE CONCAT('%',#{roleName,jdbcType=VARCHAR}, '%')
		</if>
		ORDER BY
		r.role_key
	</select>

	<select id="listRoleByMenuBackId" resultMap="BaseResultMap"
		parameterType="integer">
		SELECT
		r.id,
		r.role_key,
		r.role_name,
		r.is_enable
		FROM
		`a_role` r
		INNER JOIN a_role_menu_back rm ON rm.role_id = r.id
		WHERE
		rm.state = 'A'
		AND r.state = 'A'
		AND rm.menu_back_id = #{menuBackId,jdbcType=INTEGER}
	</select>


	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from a_role
		where id = #{id,jdbcType=INTEGER}
	</select>

	<!--依据角色名称查询角色，用于查询用户在微信注册时选择的基础角色的id -->
	<select id="selectByRoleName" resultMap="BaseResultMap"
		parameterType="org.jit.sose.domain.entity.Role">
		select
		<include refid="Base_Column_List" />
		from a_role
		where role_name = #{roleName,jdbcType=VARCHAR}
	</select>

	<delete id="deleteByPrimaryKey"
		parameterType="java.lang.Integer">
		delete from a_role
		where id = #{id,jdbcType=INTEGER}
	</delete>

	<insert id="insert"
		parameterType="org.jit.sose.domain.entity.Role">
		insert into a_role
		<trim prefix="(" suffix=")" suffixOverrides=",">
			role_key,
			role_name,
			<if test="description != null">
				description,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			#{roleKey,jdbcType=VARCHAR},
			#{roleName,jdbcType=VARCHAR},
			<if test="description != null">
				#{description,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	
	<update id="disableList" parameterType="java.util.List">
    UPDATE a_role
    SET is_enable = FALSE
    WHERE
        state = 'A'
    AND id IN 
    <foreach collection="idList" item="id" open="(" close=")" separator=",">
       #{id,jdbcType=INTEGER}
    </foreach>
  </update>

	<update id="updateByPrimaryKeySelective"
		parameterType="org.jit.sose.domain.entity.Role">
		update a_role
		<set>
			<if test="roleKey != null">
				role_key = #{roleKey,jdbcType=VARCHAR},
			</if>
			<if test="roleName != null">
				role_name = #{roleName,jdbcType=VARCHAR},
			</if>
			<if test="description != null">
				description = #{description,jdbcType=VARCHAR},
			</if>
			<if test="isEnable != null">
				is_enable = #{isEnable,jdbcType=BIT},
			</if>
			<if test="createDate != null">
				create_date = #{createDate,jdbcType=TIMESTAMP},
			</if>
			<if test="updateDate != null">
				update_date = #{updateDate,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="org.jit.sose.domain.entity.Role">
		update a_role
		set role_key = #{roleKey,jdbcType=VARCHAR},
		role_name = #{roleName,jdbcType=VARCHAR},
		description = #{description,jdbcType=VARCHAR},
		is_enable = #{isEnable,jdbcType=BIT},
		create_date = #{createDate,jdbcType=TIMESTAMP},
		update_date = #{updateDate,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=INTEGER}
	</update>
</mapper>